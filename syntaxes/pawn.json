{
	"scopeName": "source.pawn",
	"fileTypes": [
		"pwn",
		"inc",
		"p"
	],
	"firstLineMatch": "(?i)-\\*-[^*]*(Mode:\\s*)?PAWN(\\s*;.*?)?\\s*-\\*-",
	"name": "PAWN",
	"patterns": [
		{
			"include": "#preprocessor-rule-enabled"
		},
		{
			"include": "#preprocessor-rule-disabled"
		},
		{
			"include": "#preprocessor-rule-other"
		},
		{
			"include": "#comments"
		},
		{
			"match": "\\b(break|case|continue|default|do|else|for|goto|if|return|switch|while|contloop)\\b",
			"name": "keyword.control.pawn"
		},
		{
			"match": "\\b(asm|__asm|auto|bool|char|double|enum|float|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
			"name": "storage.type.pawn"
		},
		{
			"match": "([a-zA-Z][\\w]*\\s*:)",
			"name": "support.class.pawn"
		},
		{
			"match": "(\\{[\\w ,]+\\}:)",
			"name": "support.class.pawn"
		},
		{
			"match": "\\b(const|extern|register|static|volatile|inline|public|forward|new|stock|native|function)\\b",
			"name": "storage.modifier.pawn"
		},
		{
			"match": "\\b(NULL|true|false|TRUE|FALSE|sizeof|tagof)\\b",
			"name": "constant.language.pawn"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+     # define\n((?<id>[a-zA-Z_$][\\w$]*))  # macro name\n(?:\n  (\\()\n    (\n      \\s* \\g<id> \\s*         # first argument\n      ((,) \\s* \\g<id> \\s*)*  # additional arguments\n      (?:\\.\\.\\.)?            # varargs ellipsis?\n    )\n  (\\))\n)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.define.pawn"
				},
				"2": {
					"name": "punctuation.definition.directive.pawn"
				},
				"3": {
					"name": "entity.name.function.preprocessor.pawn"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.pawn"
				},
				"6": {
					"name": "variable.parameter.preprocessor.pawn"
				},
				"8": {
					"name": "punctuation.separator.parameters.pawn"
				},
				"9": {
					"name": "punctuation.definition.parameters.end.pawn"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.macro.pawn",
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.subscript.begin.pawn"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.subscript.end.pawn"
						}
					},
					"name": "meta.preprocessor.subscript.pawn",
					"patterns": [
						{
							"include": "#access"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"include": "$base"
				}
			]
		},
		{
			"begin": "^\\s*((#)\\s*(error|warning))\\b",
			"captures": {
				"1": {
					"name": "keyword.control.directive.diagnostic.$3.pawn"
				},
				"2": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"end": "(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.diagnostic.pawn",
			"patterns": [
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"begin": "^\\s*((#)\\s*(include|import))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$3.pawn"
				},
				"2": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.include.pawn",
			"patterns": [
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.pawn"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.pawn"
						}
					},
					"name": "string.quoted.double.include.pawn"
				},
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.pawn"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.pawn"
						}
					},
					"name": "string.quoted.other.lt-gt.include.pawn"
				}
			]
		},
		{
			"include": "#pragma-mark"
		},
		{
			"begin": "^\\s*((#)\\s*line)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.line.pawn"
				},
				"2": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.pawn",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"begin": "^\\s*(?:((#)\\s*(?:elseif|else|if))|((#)\\s*(pragma|undef)))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"2": {
					"name": "punctuation.definition.directive.pawn"
				},
				"3": {
					"name": "keyword.control.directive.$5.pawn"
				},
				"4": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.pawn",
			"patterns": [
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"include": "#block"
		},
		{
			"begin": "(?x)\n(?:\n  ^ |\n  (?:\n    (?=\\s)(?<!else|new|return)(?<=\\w)  # word + space before name\n    |\n    (?=\\s*[A-Za-z_])(?<!&&)(?<=[*&>])   # type modifier before name\n  )\n)\n(\\s*)(?!(while|for|do|if|else|switch|catch|contloop|return|sizeof|[cr]?iterate)\\s*\\()\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.function.leading.pawn"
				},
				"3": {
					"name": "entity.name.function.pawn"
				},
				"4": {
					"name": "punctuation.definition.parameters.pawn"
				}
			},
			"end": "(?<=\\})|(?=#)|(;)",
			"name": "meta.function.pawn",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#parens"
				},
				{
					"match": "\\b(const)\\b",
					"name": "storage.modifier.pawn"
				},
				{
					"include": "#block"
				}
			]
		},
		{
			"include": "#line_continuation_character"
		}
	],
	"repository": {
		"access": {
			"captures": {
				"2": {
					"name": "punctuation.separator.dot-access.pawn"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.pawn"
				},
				"4": {
					"name": "variable.other.member.pawn"
				}
			},
			"match": "((\\.)|(->))([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\()"
		},
		"block": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.pawn"
						}
					},
					"end": "\\}|(?=\\s*#\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.pawn"
						}
					},
					"name": "meta.block.pawn",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled-block"
				},
				{
					"include": "#preprocessor-rule-disabled-block"
				},
				{
					"include": "#preprocessor-rule-other-block"
				},
				{
					"include": "#sizeof"
				},
				{
					"include": "#access"
				},
				{
					"include": "#libc"
				},
				{
					"include": "#c_function_call"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.pawn"
						},
						"2": {
							"name": "punctuation.definition.parameters.pawn"
						}
					},
					"match": "(?x)\n(?:\n  (?:\n    (?=\\s)(?<!else|new|return)\n    (?<=\\w) \\s+  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"name": "meta.initialization.pawn"
				},
				{
					"include": "#block"
				},
				{
					"include": "$base"
				}
			]
		},
		"c_function_call": {
			"captures": {
				"1": {
					"name": "punctuation.whitespace.function-call.leading.pawn"
				},
				"2": {
					"name": "support.function.any-method.pawn"
				},
				"4": {
					"name": "punctuation.definition.parameters.pawn"
				}
			},
			"match": "(?x)\n(?:\n  (?=\\s)\n  (?:(?<=else|new|return) | (?<!\\w)) (\\s+)\n)?\n\n# Actual name\n(\n  \\b\n  (?!\n    (while|for|do|if|else|switch|catch|contloop|return|sizeof|r?iterate)\n    \\s* \\(\n  )\n  (?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | ::)++\n)\n\\s*(\\() # Opening bracket",
			"name": "meta.function-call.pawn"
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.pawn"
						}
					},
					"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
					"name": "comment.block.pawn"
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.pawn"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.pawn"
						}
					},
					"name": "comment.block.pawn"
				},
				{
					"match": "\\*/.*\\n",
					"name": "invalid.illegal.stray-comment-end.pawn"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.pawn"
						}
					},
					"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
					"name": "comment.line.banner.cpp"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.cpp",
							"patterns": [
								{
									"include": "#line_continuation_character"
								}
							]
						}
					]
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"end": "^\\s*#\\s*endif\\b",
			"patterns": [
				{
					"include": "#disabled"
				},
				{
					"include": "#pragma-mark"
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\s*\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.pawn"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
					"name": "constant.numeric.pawn"
				}
			]
		},
		"parens": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.pawn"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.pawn"
				}
			},
			"name": "meta.parens.pawn",
			"patterns": [
				{
					"include": "#parens"
				},
				{
					"include": "$base"
				}
			]
		},
		"pragma-mark": {
			"captures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.pragma.pragma-mark.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				},
				"4": {
					"name": "meta.toc-list.pragma-mark.pawn"
				}
			},
			"match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
			"name": "meta.section"
		},
		"preprocessor-rule-disabled": {
			"begin": "^\\s*(((#)if)\\s+(0)\\b).*",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				},
				"4": {
					"name": "constant.numeric.preprocessor.pawn"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else)\\b)",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.pawn"
						},
						"2": {
							"name": "keyword.control.directive.conditional.pawn"
						},
						"3": {
							"name": "punctuation.definition.directive.pawn"
						}
					},
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"contentName": "comment.block.preprocessor.if-branch",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-block": {
			"begin": "^\\s*(((#)if)\\s+(0)\\b).*",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				},
				"4": {
					"name": "constant.numeric.preprocessor.pawn"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else\\b))",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.pawn"
						},
						"2": {
							"name": "keyword.control.directive.conditional.pawn"
						},
						"3": {
							"name": "punctuation.definition.directive.pawn"
						}
					},
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"contentName": "comment.block.preprocessor.if-branch.in-block",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled": {
			"begin": "^\\s*(((#)if)\\s+(0*1)\\b)",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				},
				"4": {
					"name": "constant.numeric.preprocessor.pawn"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else)\\b).*",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.pawn"
						},
						"2": {
							"name": "keyword.control.directive.conditional.pawn"
						},
						"3": {
							"name": "punctuation.definition.directive.pawn"
						}
					},
					"contentName": "comment.block.preprocessor.else-branch",
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-block": {
			"begin": "^\\s*(((#)if)\\s+(0*1)\\b)",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				},
				"4": {
					"name": "constant.numeric.preprocessor.pawn"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else)\\b).*",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.pawn"
						},
						"2": {
							"name": "keyword.control.directive.conditional.pawn"
						},
						"3": {
							"name": "punctuation.definition.directive.pawn"
						}
					},
					"contentName": "comment.block.preprocessor.else-branch.in-block",
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"preprocessor-rule-other": {
			"begin": "^\\s*(((#)\\s*if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"end": "^\\s*(((#)\\s*(endif))\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"preprocessor-rule-other-block": {
			"begin": "^\\s*(((#)\\s*if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.pawn"
				},
				"2": {
					"name": "keyword.control.directive.conditional.pawn"
				},
				"3": {
					"name": "punctuation.definition.directive.pawn"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.pawn"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.pawn"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.pawn"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.pawn"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.pawn"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.pawn"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.pawn"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.pawn"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.pawn"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.pawn"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.pawn"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.pawn"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.pawn"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.pawn"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.pawn"
						}
					},
					"name": "string.quoted.double.pawn",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.pawn"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.pawn"
						}
					},
					"name": "string.quoted.single.pawn",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.pawn"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.pawn"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,;:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
					"name": "constant.other.placeholder.pawn"
				},
				{
					"match": "%",
					"name": "invalid.illegal.placeholder.pawn"
				}
			]
		}
	},
	"version": "0.1.0"
}